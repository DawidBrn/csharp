
/** creational design patterns - examples and notes
It's important to use the pattern that bests fits the need of the situation. 
Creational design pattern strive to separate a system for creating, composing and representing 
objects.

// abstract factory design pattern, abstract factory -> concrete factory ->
abstract product -> concrete product -> client(map out objects and variances of objects
-> decalre abstract object interface for all object types -> create contrete
classes to implement previous interfaces -> declare abstract factory interface
with a set of creation rules/methods for all abstract objects created by this factory
 -> implement set of concrete classes that each represent an object variant phone->android/IOS
, tv -> OLED / amoled itd and write factory inicialization code -> instead of using 
contructors call certain creation method for a variant.Use when code needs to work 
with various familes of similiar objects but want to depend on concrete classes
of specific objects , to provide better expandability of code

// builder design pattern, pattern used for creating complex objects data ultimetly can vary from
each other for example toyota corrola from 1998 with 1.3L gas engine and 1.6L gas engine.
Main advantege of using builder pattern is reusability of same contructors for diffrent version
of the object, although the complexity of code grows with objects differences

//factory method pattern creates objects without specifying the exact classes to create

//prototype pattern creates a new object from an object that already exists

//singleton pattern ensures that only one instance of an object is created and exists in the app
at any given time

**/



/** structural design pattens helps to ensure that even if one part changes the entire structure
 * of the code doesn't need to change. Here inheritance is a primary component of structural desing 
 * pattern. They allow us to compose objects in diffrent ways to create new functionality.
 * 
 //adapter pattern allows for two classes that are not compatible to work togheter by using an 
interface with one of the existing classes. Adapter follows the single responibility principal,
allow to introduce new types of adapters to code without breaking existing client code. 

// bridge decouples two classes so that they can vary independent. Use 

// composite design pattern takes a group of objects and combines them into a single object. Help treating 
group of object as a tree structure. 

//decorator patter lets an object's behavior get extanded at run time, allows to create a wrapper objects
to assign additional behaviour without touching inside code, however its difficult to remove a specific wrapper 
from the stack of wrappers

// facade design patter provides a simple interface allowing us to work with a more complex object
that the interface works with. Using facade is not simple with big amounts of subsystem. Always try to avoid 
creating a god object/monolithic classes - object that is coupled with every subsystem in the program

// flyweight reduces the overhead of creating complex object models. It's used to remove meaningless data
overlapping saving memory and increasing performance. When the number of objects surpass avalible memory 
 

//proxy pattern provides a placeholder interface aimed at controlling access, reducing cost or lessening 
complexity. It controlls acces to the original object allowing to perform something either before or after
request gets through the original object. ex. protection proxy if you want to limit access to a service for 
specific users/customers. remote proxy if you want to have remote execution of a remote service. loggin proxy
for logging user/customer requests or cache proxy to cache history of users request.
 * 
 * **/



 
 
 
 
 
 
 
 **/